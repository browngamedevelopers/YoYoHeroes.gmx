<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBluePlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar farthest;
farthest = x;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Image to Rest
image_speed = .2;
imagestart = 0;
imageend = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(mouse_check_button(mb_left)){
    shootYoyo(mouse_x, mouse_y);
}

/*canmove = position_meeting(x-16,y+32,objStatic) || position_meeting(x-16,y+32,objDynamic)
        || position_meeting(x+16,y+32,objStatic) || position_meeting(x+16,y+32,objDynamic) 
        || position_meeting(x,y+32,objStatic) || position_meeting(x,y+32,objDynamic);*/
        
        
imagestart = 0;
imageend = 1;
//phy_speed_x = 0;
//phy_speed_y = 0;
        
canmove = position_meeting(x-sprite_width/2,y+sprite_height/2,objAllObjects) 
        || position_meeting(x+sprite_width/2,y+sprite_height/2,objAllObjects)
        || position_meeting(x,y+sprite_height/2+8,objAllObjects) ;
//canmove = true;
        
if(keyboard_check(vk_left) || keyboard_check(ord('A'))){
    if(canmove){
        imagestart = 1;
        imageend = 7;
        image_xscale = -1;
        hspeed  = -PLAYER_SPEED;
    }
}

if(keyboard_check(vk_right) || keyboard_check(ord('D'))){
    if(canmove){
        imagestart = 1;
        imageend = 7;
        image_xscale = 1;
        hspeed  = PLAYER_SPEED;
    }
}
if(keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W'))){
    if(canmove){
        //physics_apply_impulse(phy_com_x, phy_com_y, 300* phy_speed_x, PLAYER_JUMP*(-300) - 300*abs(phy_speed_x) );
        vspeed = -1 * 20;
        //show_debug_message("jumped: " + string(phy_speed_x));
    }
}

//if(phy_speed_y &lt; -1){
//phy_speed_y += 1;

//physics_apply_force(phy_com_x, phy_com_y, 0, ROOM_GRAVITY*phy_mass)
//get_gravity_y = -50;
if(canmove){
    //on ground
    hspeed -= sign(hspeed)*0.5;
}else {
    //in air
    //phy_speed_x -= sign(phy_speed_x)*0.1;
}

if(vspeed &gt; 0){
    //falling
    imagestart = 7;
    imageend = 10;
}else if (vspeed &lt;-.1){
    //jumping
    imagestart = 1;
    imageend = 1;
}
//show_debug_message(phy_speed_x);
//phy_speed_y = sqrt(sqr(phy_speed_y) + sqr(phy_speed_x));
if(!canmove){
    vspeed += 1;
}
show_debug_message(vspeed);
image_index = max(imagestart, image_index mod imageend);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAllObjects">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vspeed &gt; 0){
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//thing = collision_line(x,y,mouse_x,mouse_y,objAllObjects,false,true);
cursor_sprite = sprCrosshair;

//background_hspeed[0] = view_hspeed[0];
//background_x[0] = view_xview[0];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.0500000007450581</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
